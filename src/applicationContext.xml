<?xml version="1.0" encoding="UTF-8"?>
<beans 
    default-lazy-init="default"
    xmlns="http://www.springframework.org/schema/beans" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xsi:schemaLocation="  
       http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
       http://www.springframework.org/schema/mvc   
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd   
       http://www.springframework.org/schema/tx   
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/util 
       http://www.springframework.org/schema/util/spring-util-4.3.xsd
       http://www.springframework.org/schema/data/jpa 
       http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd"> 


      <!-- Spring中提供了一个工厂，这个工厂的作用是根据配置信息创建对象，
      	Spring中提供了一个容器，这个容器用于存储对象，以及管理对象之间的依赖关系（has a）(继承或实现、关联关系、依赖关系)
       is a	(继承或实现)
       has a(关联关系)
       use a(依赖关系（弱）)
       class Student extends Person{ //is a
       		Computer c; //has a
       		
       		void study(){
       			Math.random();//use a
       		}
       }
       -->
      
      <bean id="date1" class="java.util.Date"/>
      
      <!-- Class.forName("helloService").newInstance() -->
      <!-- scope作用域的属性
      		1、singleton		spring容器中此bean的实例只有一份(单例设计)
      		2、prototype		spring容器中每次获取bean都会创建新一个新的对象(多例)
      		当对象的scope的值为prototype时，此时对象的生命周期不再由spring容器控制。
       -->
      <bean id="helloService" class="practice.com.beans.HelloService" scope="prototype"
      init-method="init" destroy-method="destroy" lazy-init="true"/>
       
       <!-- 构建子类类型对象 -->
       <bean id="c1" class="java.util.GregorianCalendar"/>
       <!-- 通过Calendar的静态方法getInstance获取对象 -->
       <bean id="c2" class="java.util.Calendar" factory-method="getInstance"/>
      <!-- 指定调用哪个bean对象getTime方法 -->
       <bean id="date2" factory-bean="c2" factory-method="getTime"/>
       
       <bean id="sdf" class="java.text.SimpleDateFormat">
       		<constructor-arg value="yyyy/MM/dd"/>
       </bean>
</beans>
